{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","event","this","setState","target","value","onSearch","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f4edd0d.chunk.js","sourcesContent":["let accessToken;\nconst clientId = 'ec127e56df2e4dd0ab69d55b1e3b625c';\nconst redirectUri = 'http://weary-lace.surge.sh';\n\nconst Spotify = {\n    getAccessToken() {\n        if(accessToken){\n            return accessToken\n        }\n\n        //check for an access Token match \n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if(accessTokenMatch && expiresInMatch ) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            //this clears the parameters, allowing us to grab new access token when it expires. \n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token',null, '/');\n            return accessToken\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n            \n        }).then(response => {\n                return response.json();\n        }).then(jsonResponse => {\n                if(!jsonResponse.tracks) {\n                    return [];\n                } \n                    return jsonResponse.tracks.items.map(track => ({\n                        id: track.id, \n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    }));\n                })\n    \n    },\n\n    savePlaylist(name, trackUris){\n        if(!name || !trackUris.length){\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name:name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                })\n\n            })\n        })\n    }\n\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state ={\n            term: ''\n        };\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value})\n    }\n    search() {\n        this.props.onSearch(this.state.term)\n    }\n    \n        render(){\n            return(\n            <div className=\"SearchBar\">\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n                    <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n            )\n        \n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n    //used in a search, results of the search isRemoval is set to false (hence + to add to playlist)\n    //if the song is already added to the playlist, isRemoval is true (hence - added to the playlist)\n    renderAction(){\n        if(this.props.isRemoval){\n            return <button className='Track-action' onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\n        }\n    }\n\n    addTrack() {\n        //checks if the track's id already exists or not\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track)\n    }\n    \n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p> {this.props.track.artist} | {this.props.track.album} </p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default Track;","import { render } from '@testing-library/react';\nimport React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track'\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n    {/*You will add a map method that renders a set of Track components  */}\n                {\n                    this.props.tracks.map(track => {\n                        return <Track track={track} \n                                        key={track.id} \n                                        onAdd={this.props.onAdd}\n                                        onRemove={this.props.onRemove}\n                                        isRemoval={this.props.isRemoval}/>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\n\nclass SearchResults extends React.Component {\n        render() {\n            return(\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                {/* Passing down the searchResults from App to SearchResults to NOW the TrackList Component */}\n                <TrackList tracks={this.props.searchResults} \n                    onAdd={this.props.onAdd}\n                    isRemoval={false}/>\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n        render() {\n            return (\n            <div className=\"Playlist\">\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\n            {/* Add a TrackList component */}\n                    <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist;","import { render } from '@testing-library/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {searchResults: [], \n      \n      playlistName: 'My Playlist',\n      \n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  //add a method to add tracks \n  addTrack(track){\n    let tracks = this.state.playlistTracks\n    if(tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return \n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks})\n  }\n  //remove method to remove tracks from playlist \n  removeTrack(track) {\n    let tracks = this.state.playlistTracks \n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks})\n    }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    //alert('working')\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist', \n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => \n      this.setState({searchResults: searchResults})\n    )\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n          <div className=\"App\">\n    {/*Add a SearchBar component */}\n            <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n    {/*Add a SearchResults component */}\n            <SearchResults searchResults={this.state.searchResults}\n                            onAdd={this.addTrack}/>\n    {/* Add a Playlist component */}\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}/>\n          </div>\n          </div>\n      </div>\n    )\n  }\n} \n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}